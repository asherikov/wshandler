#!/usr/bin/env bash
#!/usr/local/bin/bash -x
# shellcheck disable=SC2317

set -e
set -o pipefail

WSH_VERSION=

help()
{
    EXIT_CODE=${1:-"0"}
    echo "Usage (default values are shown in curly braces):"
    echo "  wshandler [<COMMON_ARGS>] [<COMMAND_ARGS>] <COMMAND> <COMMAND_ARGS>"
    if [ -n "${WSH_VERSION}" ]
    then
        echo "  wshandler -v|--version"
    fi
    echo ""
    echo "Notation:"
    echo "  <REQUIRED ARGUMENT>"
    echo "  {DEFAULT VALUE}"
    echo "  [OPTIONAL ARGUMENT]"
    echo "  (VALID OPTIONS IN A LIST)"
    echo ""
    echo "Common arguments:"
    echo "  -y|--yaml_tool auto|gojq|yq     {auto}                  # use gojq or yq, auto prefers gojq"
    echo "  -Y|--yaml_binary <BINARY_PATH>  {yq|gojq}               # override yaml tool (yq/gojq) path"
    echo "  -r|--root <WORKSPACE_ROOT>      {./}                    # parent of --list if it is a path"
    echo "  -c|--cache <CACHE_DIR>          {<WORKSPACE_ROOT>}      # temporary files created here"
    echo "  -t|--type rosinstall|repos      {repos}                 # repository list format"
    echo "  -i|--indent 1|2|3...            {4}                     # default indentation in yaml repository list"
    echo "  -k|--keep-going                 {false}                 # do not stop on errors"
    echo "  -l|--list <FILENAME>            {.rosinstall|.repos}    # default depends on --type"
    echo ""
    echo "Repository list commands:"
    echo "  Information:"
    echo "    [-u|--unsorted] status    # show workspace status"
    echo "    is_source_space           # check if a directory is a workspace"
    echo ""
    echo "  Initialization:"
    echo "    Common arguments:"
    echo "      [-p|--policy <POLICY1[,POLICY2]> ({default}|shallow|nolfs)]"
    echo "        default   # plain clone"
    echo "        shallow   # shallow clone"
    echo "        nolfs     # disable git LFS"
    echo "    clone git <LIST_REPOSITORY> [<BRANCH>]    # clone workspace from a given repository"
    echo "    init [git <PACKAGE_REPOSITORY> ...]       # initialize new workspace"
    echo ""
    echo "  Modification:"
    echo "    [-p|--policy {ask}|add|show|clean] scrape <DIRECTORY {<WORKSPACE_ROOT>}>  # process unmanaged repositories"
    echo "      ask         # interactive mode"
    echo "      add         # automaticaly add repositories"
    echo "      show        # show unmanaged repositories"
    echo "      clean       # remove unmanaged repositories"
    echo "    add git <PACKAGE_NAME> <PACKAGE_URL> <PACKAGE_VERSION>    # add a repository"
    echo "    set_version_by_url <PACKAGE_URL> <PACKAGE_VERSION>        # set repository version"
    echo "    set_version_by_name <PACKAGE_NAME> <PACKAGE_VERSION>      # set repository version"
    echo "    set_version_to_hash                                       # set all repository versions to hash"
    echo "    [-p|--policy <POLICY1[,POLICY2]> ({active})] set_version_to_branch <BRANCH_NAME>  # change to the given branch"
    echo "      active      # switch if the given branch is checked out"
    echo "    remove <PACKAGE_NAME> ...                                 # remove repository from a list"
    echo "    remove_by_url <PACKAGE_URL> [<PACKAGE_URL>]               # remove repository from a list"
    echo "    [-p|--policy {keep}|replace] merge <LIST_FILENAME>        # merge repository list"
    echo "      keep        # keep original entries when there is a collision"
    echo "      replace     # replace entries when there is a collision"
    echo ""
    echo "Repository commands:"
    echo "  Selective commands (<PACKAGE_NAME> may be a pattern):"
    echo "    Common parameters:"
    echo "      [-j|--jobs <NUM_THREADS> {1}]   # use multiple jobs if possible"
    echo "    clean [<PACKAGE_NAME> ...]        # remove repository"
    echo "    prune [<PACKAGE_NAME> ...]        # git prune"
    echo "    push [<PACKAGE_NAME> ...]         # git push"
    echo "    unshallow [<PACKAGE_NAME> ...]    # git unshallow"
    echo "    [-p|--policy <POLICY1[,POLICY2]> ({default}|shallow|nolfs|rebase)] update [<PACKAGE_NAME> ...] # git pull"
    echo "      default     # plain clone"
    echo "      shallow     # shallow clone"
    echo "      nolfs       # disable git LFS"
    echo "      rebase      # do git pull with rebase"
    echo ""
    echo "  Generic commands:"
    echo "    [-j|--jobs <NUM_THREADS> {1}] [-s|-source {git}] foreach '<COMMAND>'  # execute command in each repository"
    echo ""
    echo "  Branching commands:"
    echo "    branch show ['<GREP_PATTERN>']                    # show matching branches"
    echo "    branch new <BRANCH_NAME>                          # create a new branch in modified repositories"
    echo "    branch allnew <BRANCH_NAME>                       # create a new branch in all repositories"
    echo "    branch delete <BRANCH_NAME>                       # delete branch from all repositories"
    echo "    branch merge <BRANCH_NAME> <TARGET_BRANCH {main}> # merge brach"
    echo "    commit '<MESSAGE>'                                # commit to modified repositories"
    echo ""
    echo "wshandler installation commands:"
    echo "  install_test_deps                                                           # install test dependeincies"
    echo "  [-p|--policy {skip_yaml_tool}|snap|download|apt] install <BIN_PATH {~/bin}> # install wshandler"
    echo "      skip_yaml_tool  # do not install yaml tool"
    echo "      snap            # install yaml tool (jq) using snap"
    echo "      download        # download yaml tool (jq)"
    echo "      apt             #  install yaml tool (gojq) using apt"
    echo "  upgrade <BIN_PATH {~/bin}>              # upgrade wshandler"
    echo "  upgrade_appimage <BIN_PATH {~/bin}>     # upgrade wshandler AppImage"

    exit "${EXIT_CODE}"
}


backup()
{
    mkdir -p "${WSH_CACHE_DIR}"
    cp "${WSH_REPOLIST}" "${WSH_CACHE_DIR}/repolist.back"
}


rosinstall_yq_git_repo_triplets()
{
    "${WSH_YAML_CMD[@]}" '.[].git | (.local-name + " " + .uri + " " + ((select(has("version") and .version != null) // {"version": "-"}) | .version))' < "${WSH_REPOLIST}"
}

rosinstall_gojq_git_repo_triplets()
{
    "${WSH_YAML_CMD[@]}" --raw-output '.[].git | "\(."local-name") \(.uri) \(.version // "-")"' < "${WSH_REPOLIST}"
}

repos_yq_git_repo_triplets()
{
    "${WSH_YAML_CMD[@]}" '.repositories.* | select(. | has("type") and .type == "git") | (key + " " + .url + " " + ((select(has("version") and .version != null) // {"version": "-"}) | .version))' < "${WSH_REPOLIST}"
}

repos_gojq_git_repo_triplets()
{
    # shellcheck disable=SC2016
    "${WSH_YAML_CMD[@]}" --raw-output '.repositories | keys[] as $k | select(.[$k].type == "git") | "\($k) \(.[$k].url) \(.[$k].version // "-")"' < "${WSH_REPOLIST}"
}

rosinstall_yq_git_repo_names()
{
    "${WSH_YAML_CMD[@]}" '.[].git | (.local-name)' < "${WSH_REPOLIST}"
}

rosinstall_gojq_git_repo_names()
{
    "${WSH_YAML_CMD[@]}" --raw-output '.[].git | "\(."local-name")"' < "${WSH_REPOLIST}"
}

repos_yq_git_repo_names()
{
    "${WSH_YAML_CMD[@]}" '.repositories.* | select(. | has("type") and .type == "git") | key' < "${WSH_REPOLIST}"
}

repos_gojq_git_repo_names()
{
    # shellcheck disable=SC2016
    "${WSH_YAML_CMD[@]}" --raw-output '.repositories | keys[] as $k | select(.[$k].type == "git") | "\($k)"' < "${WSH_REPOLIST}"
}



git_status()
{
    DATA=$(
        echo "name|version|actual version|HM|repository";
        echo "----|-------|--------------|--|----------";
        "${WSH_WORKSPACE_TYPE}_${WSH_YAML_TOOL}_git_repo_triplets" | while read -r -a TRIPLET; do dir_git_status "${TRIPLET[@]}"; done | "${WSH_SORT_COMMAND}"
    )

    FORMAT_STRING=""
    for i in {1..4};
    do
        MAX_LEN=$(cut -f "$i" -d '|' <<< "${DATA}" | wc -L | grep -o "[0-9]*")
        if [ "$i" != "1" ]
        then
            FORMAT_STRING+=" "
        fi
        FORMAT_STRING+="%-${MAX_LEN}.${MAX_LEN}s"
    done

    echo "Flags: H - version hash mismatch, M - uncommited changes"
    IFS=$'\n' readarray -t ROWS <<< "${DATA}"
    for ROW in "${ROWS[@]}"
    do
        IFS='|' read -ra COLS <<< "${ROW}"
        # use ${COLUMNS} to crop?
        # shellcheck disable=SC2059
        printf "${FORMAT_STRING} %s\n" "${COLS[@]}"
    done

    echo

    WSH_COMMAND_POLICY=show
    git_scrape "${WSH_WORKSPACE_ROOT}"
}

update_root()
{
    IFS=',' read -ra POLICIES <<< "${WSH_COMMAND_POLICY}"

    if [ -d "${WSH_WORKSPACE_ROOT}/.git" ]
    then
        pushd "${WSH_WORKSPACE_ROOT}" > /dev/null
        if [ -n "$(git remote show)" ]
        then
            echo "Processing workspace root ${WSH_WORKSPACE_ROOT}"
            git fetch
            if git diff --exit-code > /dev/null && git diff --cached --exit-code > /dev/null
            then
                # if we are on a branch make sure that it is updated
                if (git branch --show-current | grep "${GIT_VERSION}")
                then
                    PULL_ENV=(env)
                    PULL_ARGS=()
                    for POLICY in "${POLICIES[@]}";
                    do
                        case ${POLICY} in
                            rebase)
                                PULL_ARGS+=(--rebase)
                                ;;
                            nolfs)
                                PULL_ENV+=("GIT_LFS_SKIP_SMUDGE=1")
                                ;;
                        esac
                    done
                    # do not fail, e.g., the branch might be deleted from git remote
                    "${PULL_ENV[@]}" git pull "${PULL_ARGS[@]}" || true
                fi
            fi
        fi
        popd > /dev/null
    fi
}

git_scrape()
{
    SCRAPE_ROOT=$(realpath "$1")
    FIND_ARGS=()
    if [ "${WSH_WORKSPACE_ROOT}" -ef "${SCRAPE_ROOT}" ]
    then
        FIND_ARGS+=(-mindepth 2)
    fi
    GIT_DIRS=$(cd "${SCRAPE_ROOT}" && find ./ "${FIND_ARGS[@]}" -type d -name ".git" | sed -e 's|^./||' -e "s|/.git$||" | sort)
    UNKNOWN_GIT_DIRS=$(comm -2 -3 <(echo "${GIT_DIRS}" | tr ' ' '\n') <("${WSH_WORKSPACE_TYPE}_${WSH_YAML_TOOL}_git_repo_names" | sort))

    for GIT_DIR in ${UNKNOWN_GIT_DIRS}
    do
        echo "Processing ${GIT_DIR}"
        REPO_DIR="${SCRAPE_ROOT}/${GIT_DIR}"
        pushd "${REPO_DIR}" > /dev/null
        GIT_REPO=$(git remote get-url origin | tr -d '\n' || true)

        if [ "${GIT_REPO}" == "" ]
        then
            GIT_REPO=$(pwd)
        fi

        GIT_VERSION=$(git branch --show-current | tr -d '\n')
        GIT_VERSION=${GIT_VERSION:-"$(git describe --tags | tr -d '\n')"}
        GIT_VERSION=${GIT_VERSION:-"$(git rev-parse HEAD | tr -d '\n')"}

        popd > /dev/null

        echo "Found unmanaged git repository:  ${GIT_DIR}  ${GIT_REPO}  ${GIT_VERSION}"

        while true
        do
            case "${WSH_COMMAND_POLICY}" in
                ask|default)
                    read -r -p "Add (y or a (default)), do nothing (n), remove (c): " yn
                    yn=${yn:-"Y"};;
                show)
                    yn='N';;
                add)
                    yn='Y';;
                clean)
                    yn='C';;
                *)
                    help 20;;
            esac
            case $yn in
                [YyAa])
                    execute_add git "${GIT_DIR}" "${GIT_REPO}" "${GIT_VERSION}"
                    break;;
                [Nn])
                    break;;
                [Cc])
                    rm -rf "${REPO_DIR}";
                    break;;
                *)
                    echo "Please answer y or n for yes or no.";;
            esac
        done
    done
}

git_clone()
{
    GIT_REPO=$1
    VERSION=$2
    DIR=$3

    CLONE_ENV=(env)
    CLONE_ARGS=(--recurse-submodules)
    for POLICY in "${POLICIES[@]}";
    do
        case ${POLICY} in
            shallow)
                # --no-tags -- we need tags
                # --single-branch -- implied by --depth
                CLONE_ARGS+=(--depth 1 --shallow-submodules)
                ;;
            nolfs)
                CLONE_ENV+=("GIT_LFS_SKIP_SMUDGE=1")
                ;;
        esac
    done

    SOURCE_DESTINATION=("${GIT_REPO}")
    if [ -n "${DIR}" ]
    then
        SOURCE_DESTINATION+=("${DIR}")
    fi

    if [ "${VERSION}" == '-' ] || [ -z "${VERSION}" ]
    then
        "${CLONE_ENV[@]}" git clone "${CLONE_ARGS[@]}" "${SOURCE_DESTINATION[@]}"
    else
        if ! ("${CLONE_ENV[@]}" git clone "${CLONE_ARGS[@]}" --branch "${VERSION}" "${SOURCE_DESTINATION[@]}")
        then
            # GIT_VERSION is a hash
            # clone with history to be able to find it
            "${CLONE_ENV[@]}" git clone --recurse-submodules "${SOURCE_DESTINATION[@]}"
            pushd "${DIR}" > /dev/null
            "${CLONE_ENV[@]}" git checkout "${VERSION}"
            popd > /dev/null
        fi
    fi
}


dir_run()
{
    echo ">>> Processing '$1'"
    if [ -d "${WSH_WORKSPACE_ROOT}/$1/" ]
    then
        cd "${WSH_WORKSPACE_ROOT}/$1/" && sh -c "$2"
    else
        echo "Missing directory: ${WSH_WORKSPACE_ROOT}/$1/"
    fi
}

dir_git_uncommitted()
{
    git status --porcelain | grep . > /dev/null
}

dir_git_get_hash()
{
    git rev-parse HEAD
}

dir_git_get_branch()
{
    git rev-parse --abbrev-ref HEAD
}

dir_git_status()
{
    NAME="$1"
    GIT_DIR="${WSH_WORKSPACE_ROOT}/$1"
    GIT_REPO="$2"
    GIT_VERSION="$3"

    GIT_ACTUAL_VERSION="-"
    GIT_ACTUAL_HASH="-"
    if [ -d "${GIT_DIR}/.git" ]
    then
        cd "${GIT_DIR}"
        GIT_VERSION_HASH=$(git rev-parse --short "${GIT_VERSION}" 2> /dev/null || echo -n "-")
        GIT_ACTUAL_VERSION=$(git describe --dirty --broken --all --long --always | tr -d '\n')
        GIT_ACTUAL_HASH=$(git rev-parse --short HEAD || echo -n "-")
    fi

    FLAGS=""
    if [ "${GIT_VERSION_HASH}" = "${GIT_ACTUAL_HASH}" ]
    then
        FLAGS+=" "
    else
        if [ "${GIT_VERSION_HASH}" = "-" ] || [ "${GIT_ACTUAL_HASH}" = "-" ]
        then
            FLAGS+="?"
        else
            FLAGS+="H"
        fi
    fi

    if [ "${GIT_ACTUAL_HASH}" != "-" ] && dir_git_uncommitted;
    then
        FLAGS+="M"
    else
        FLAGS+=" "
    fi

    echo "${NAME}|${GIT_VERSION}|${GIT_ACTUAL_VERSION}|${FLAGS}|${GIT_REPO}"
}


dir_git_unshallow()
{
    REPO_DIR="${WSH_WORKSPACE_ROOT:?}/$1"
    dir_git_assert "${REPO_DIR}"
    pushd "${REPO_DIR}" > /dev/null
    if git fetch --unshallow
    then
        git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
        git fetch origin
    fi
    popd > /dev/null
}

dir_git_prune()
{
    REPO_DIR="${WSH_WORKSPACE_ROOT:?}/$1"
    dir_git_assert "${REPO_DIR}"
    pushd "${REPO_DIR}" > /dev/null
    git remote | xargs --no-run-if-empty -L 1 -I {} git remote prune {}
    popd > /dev/null
}

dir_git_push()
{
    REPO_DIR="${WSH_WORKSPACE_ROOT:?}/$1"
    dir_git_assert "${REPO_DIR}"
    pushd "${REPO_DIR}" > /dev/null
    git push
    popd > /dev/null
}

dir_git_update()
{
    GIT_DIR="${WSH_WORKSPACE_ROOT:?}/$1"
    GIT_REPO="$2"
    GIT_VERSION="$3"

    mkdir -p "${GIT_DIR}"

    pushd "${GIT_DIR}" > /dev/null
    IFS=',' read -ra POLICIES <<< "${WSH_COMMAND_POLICY}"

    if [ -d ".git" ]
    then
        git fetch
        if git diff --exit-code > /dev/null && git diff --cached --exit-code > /dev/null
        then
            if [ "${GIT_VERSION}" != '-' ]
            then
                git checkout "${GIT_VERSION}"
            fi
            # if we are on a branch make sure that it is updated
            if (git branch --show-current | grep "${GIT_VERSION}")
            then
                PULL_ENV=(env)
                PULL_ARGS=()
                for POLICY in "${POLICIES[@]}";
                do
                    case ${POLICY} in
                        rebase)
                            PULL_ARGS+=(--rebase)
                            ;;
                        nolfs)
                            PULL_ENV+=("GIT_LFS_SKIP_SMUDGE=1")
                            ;;
                    esac
                done
                "${PULL_ENV[@]}" git pull "${PULL_ARGS[@]}"
            fi
        fi
    else
        rm -rf "${GIT_DIR:?}/*"

        git_clone "${GIT_REPO}" "${GIT_VERSION}" "./"
    fi
    popd > /dev/null
}

dir_git_merge()
{
    NAME=$1
    BRANCH=$2
    TARGET_BRANCH=$3

    cd "${WSH_WORKSPACE_ROOT:?}/${NAME}";
    if [ "${BRANCH}" = "$(dir_git_get_branch)" ]
    then
        if dir_git_uncommitted
        then
            echo "Uncommited changes detected in '${NAME}'"
            exit 30
        fi

        if ! git rev-parse --verify "${TARGET_BRANCH}" 2> /dev/null
        then
            echo "No target branch '${TARGET_BRANCH}' in '${NAME}'"
            exit 31
        fi

        git checkout "${TARGET_BRANCH}"
        git merge "${BRANCH}"
    fi
}

dir_git_assert()
{
    if [ ! -d "$1/.git" ]
    then
        echo "${NAME}: is not a git repository'"
        exit 40
    fi
}

dir_git_clean()
{
    REPO_DIR="${WSH_WORKSPACE_ROOT:?}/$1"
    if [ ! -d "${REPO_DIR}" ]
    then
        echo "Cannot remove missing '${REPO_DIR}'";
    else
        rm -rf "${REPO_DIR}";
    fi
}

check_workspace()
{
    if [ "${WSH_YAML_TOOL}" = "auto" ]
    then
        YAML_TOOL_LIST=(gojq yq)
    else
        YAML_TOOL_LIST=("${WSH_YAML_TOOL}")
    fi

    for YAML_TOOL in "${YAML_TOOL_LIST[@]}"
    do
        WSH_YAML_TOOL="${YAML_TOOL}"
        if command -v "${WSH_YAML_BINARY}" > /dev/null
        then
            break
        fi

        WSH_YAML_BINARY="${YAML_TOOL}"
        if command -v "${WSH_YAML_BINARY}" > /dev/null
        then
            break
        fi

        WSH_YAML_BINARY="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )/${YAML_TOOL}"
        if command -v "${WSH_YAML_BINARY}" > /dev/null
        then
            break
        fi

        WSH_YAML_TOOL=""
    done

    if [ -z "${WSH_YAML_TOOL}" ]
    then
        echo "Cannot find gojq or yq."
        exit 22
    fi

    case "${WSH_YAML_TOOL}" in
        yq) WSH_YAML_CMD=("${WSH_YAML_BINARY}" --indent "${WSH_INDENT}")
            ;;
        gojq) WSH_YAML_CMD=("${WSH_YAML_BINARY}" --yaml-input "--indent=${WSH_INDENT}")
            ;;
        *)
            echo "'${WSH_YAML_TOOL}' is not a valid yaml tool.";
            help 20;;
    esac

    WSH_WORKSPACE_TYPE=${WSH_WORKSPACE_TYPE:-"repos"}
    if [ -n "${WSH_REPOLIST}" ] && [ -f "${WSH_REPOLIST}" ]
    then
        WSH_WORKSPACE_ROOT=$(realpath "$(dirname "${WSH_REPOLIST}")")
        WSH_REPOLIST=$(realpath "${WSH_REPOLIST}")
    else
        WSH_WORKSPACE_ROOT=${WSH_WORKSPACE_ROOT:-"./"}
        WSH_WORKSPACE_ROOT="$(realpath "${WSH_WORKSPACE_ROOT}")/"

        if [ -n "${WSH_REPOLIST}" ]
        then
            WSH_REPOLIST="${WSH_WORKSPACE_ROOT}/${WSH_REPOLIST}"
        else
            WSH_REPOLIST="${WSH_WORKSPACE_ROOT}/.${WSH_WORKSPACE_TYPE}"
        fi
    fi

    test -d "${WSH_WORKSPACE_ROOT}" || (echo "'${WSH_WORKSPACE_ROOT}' does not exist" && false)

    WSH_CACHE_DIR=${WSH_CACHE_DIR:-"${WSH_WORKSPACE_ROOT}/.wshandler"}

    if [ ! -f "${WSH_REPOLIST}" ]
    then
        case $1 in
            scrape|add|init)
                touch "${WSH_REPOLIST}";;
            *)
                echo "'${WSH_REPOLIST}' is not a repository list"
                exit 21;;
        esac
    fi

    WSHANDLER=("$(realpath "${BASH_SOURCE[0]}")" -y "${WSH_YAML_TOOL}" -Y "${WSH_YAML_BINARY}" -r "${WSH_WORKSPACE_ROOT}" -c "${WSH_CACHE_DIR}" -t "${WSH_WORKSPACE_TYPE}" -p "${WSH_COMMAND_POLICY}")
    if [ -n "${WSH_KEEP_GOING}" ]
    then
        WSHANDLER+=("${WSH_KEEP_GOING}")
    fi
}


execute_command()
{
    for SOURCE_TYPE in ${WSH_SOURCE_TYPES}
    do
        echo ">>> wshandler $1: ${SOURCE_TYPE} sources ---"
        "${SOURCE_TYPE}_$1" "${@:2}"
        echo "<<< wshandler $1: ${SOURCE_TYPE} sources ---"
    done
}

rosinstall_yq_merge()
{
    case "${WSH_COMMAND_POLICY}" in
        keep|default)
            INPUT_FILE=$1;;
        replace)
            cp "$1" "${WSH_REPOLIST}"
            INPUT_FILE="${WSH_CACHE_DIR}/repolist.back";;
        *)
            help 11;;
    esac

    REMOVE_LIST=$("${WSH_YAML_CMD[@]}" '.[].* | (".*.local-name == \"" +.local-name + "\" or ")' < "${WSH_REPOLIST}" | tr -d '\n' | sed -e 's/or $//')
    # shellcheck disable=SC2094
    "${WSH_YAML_CMD[@]}" "del(.[] | select(${REMOVE_LIST}))" < "${INPUT_FILE}" | "${WSH_YAML_CMD[@]}" 'del(. | select(length==0))' >> "${WSH_REPOLIST}"
}

rosinstall_gojq_merge()
{
    case "${WSH_COMMAND_POLICY}" in
        keep|default)
            "${WSH_YAML_CMD[@]}" --slurp --yaml-output '.[0] + .[1] | unique_by(.[]."local-name")' "${WSH_CACHE_DIR}/repolist.back" "$1" > "${WSH_REPOLIST}";;
        replace)
            "${WSH_YAML_CMD[@]}" --slurp --yaml-output '.[1] + .[0] | unique_by(.[]."local-name")' "${WSH_CACHE_DIR}/repolist.back" "$1" > "${WSH_REPOLIST}";;
        *)
            help 12;;
    esac
}

repos_yq_merge()
{
    case "${WSH_COMMAND_POLICY}" in
        keep|default)
            # shellcheck disable=SC2016
            "${WSH_YAML_CMD[@]}" eval-all '. as $item ireduce ({}; . * $item)' <(cat "$1") <(cat "${WSH_CACHE_DIR}/repolist.back") > "${WSH_REPOLIST}";;
        replace)
            # shellcheck disable=SC2016
            "${WSH_YAML_CMD[@]}" eval-all '. as $item ireduce ({}; . * $item)' <(cat "${WSH_CACHE_DIR}/repolist.back") <(cat "$1") > "${WSH_REPOLIST}";;
        *)
            help 13;;
    esac
}

repos_gojq_merge()
{
    case "${WSH_COMMAND_POLICY}" in
        keep|default)
            "${WSH_YAML_CMD[@]}" --slurp --yaml-output '.[0] * .[1]' "${WSH_CACHE_DIR}/repolist.back" "$1" > "${WSH_REPOLIST}";;
        replace)
            "${WSH_YAML_CMD[@]}" --slurp --yaml-output '.[1] * .[0]' "${WSH_CACHE_DIR}/repolist.back" "$1" > "${WSH_REPOLIST}";;
        *)
            help 14;;
    esac
}

execute_merge()
{
    INPUT_FILE=$1
    if [ -s "${INPUT_FILE}" ] && [ ! "${WSH_REPOLIST}" -ef "${INPUT_FILE}" ]
    then
        if [ -s "${WSH_REPOLIST}" ]
        then
            backup
            "${WSH_WORKSPACE_TYPE}_${WSH_YAML_TOOL}_merge" "${INPUT_FILE}"
        else
            cp "${INPUT_FILE}" "${WSH_REPOLIST}"
        fi
    else
        help 10;
    fi
}


rosinstall_yq_remove()
{
    "${WSH_YAML_CMD[@]}" "del(.[] | select(.*.local-name == \"$1\"))" < "${WSH_CACHE_DIR}/repolist.back" > "${WSH_REPOLIST}"
}

rosinstall_gojq_remove()
{
    "${WSH_YAML_CMD[@]}" --yaml-output "del(.[] | select(.[].\"local-name\" == \"$1\"))" < "${WSH_CACHE_DIR}/repolist.back" > "${WSH_REPOLIST}"
}

repos_yq_remove()
{
    "${WSH_YAML_CMD[@]}" "del(.repositories.$1)" < "${WSH_CACHE_DIR}/repolist.back" > "${WSH_REPOLIST}"
}

repos_gojq_remove()
{
    "${WSH_YAML_CMD[@]}" --yaml-output "del(.repositories.\"$1\")" < "${WSH_CACHE_DIR}/repolist.back" > "${WSH_REPOLIST}"
}

execute_remove()
{
    backup
    for PKG_NAME in "$@"
    do
        "${WSH_WORKSPACE_TYPE}_${WSH_YAML_TOOL}_remove" "${PKG_NAME}"
    done
}


rosinstall_yq_remove_by_url()
{
    "${WSH_YAML_CMD[@]}" "del(.[] | select(.*.uri == \"$1\"))" < "${WSH_CACHE_DIR}/repolist.back" > "${WSH_REPOLIST}"
}

rosinstall_gojq_remove_by_url()
{
    "${WSH_YAML_CMD[@]}" --yaml-output "del(.[] | select(.[].uri == \"$1\"))" < "${WSH_CACHE_DIR}/repolist.back" > "${WSH_REPOLIST}"
}

repos_yq_remove_by_url()
{
    "${WSH_YAML_CMD[@]}" "del(.repositories.* | select(.url == \"$1\"))" < "${WSH_CACHE_DIR}/repolist.back" > "${WSH_REPOLIST}"
}

repos_gojq_remove_by_url()
{
    "${WSH_YAML_CMD[@]}" --yaml-output "del(.repositories.[] | select(.url == \"$1\"))" < "${WSH_CACHE_DIR}/repolist.back" > "${WSH_REPOLIST}"
}

execute_remove_by_url()
{
    backup
    for PKG_URL in "$@"
    do
        "${WSH_WORKSPACE_TYPE}_${WSH_YAML_TOOL}_remove_by_url" "${PKG_URL}"
    done
}


rosinstall_yq_git_add()
{
    ENTRY="[{\"$1\": {\"local-name\": \"$2\", \"uri\": \"$3\", \"version\": \"$4\"}}]"
    "${WSH_YAML_CMD[@]}" "del(.[] | select(.*.local-name == \"$2\"))" < "${WSH_CACHE_DIR}/repolist.back" | "${WSH_YAML_CMD[@]}" ". + ${ENTRY}" > "${WSH_REPOLIST}"
}

rosinstall_gojq_git_add()
{
    ENTRY="[{\"$1\": {\"local-name\": \"$2\", \"uri\": \"$3\", \"version\": \"$4\"}}]"
    "${WSH_YAML_CMD[@]}" --yaml-output "del(.[] | select(.[].\"local-name\" == \"$2\"))" < "${WSH_CACHE_DIR}/repolist.back" | "${WSH_YAML_CMD[@]}" --null-input --yaml-output "input? // [] | . + ${ENTRY}" > "${WSH_REPOLIST}"
}

repos_yq_git_add()
{
    ENTRY="{\"$2\": {\"type\": \"$1\", \"url\": \"$3\", \"version\": \"$4\"}}"
    "${WSH_YAML_CMD[@]}" "del(.repositories.$2)" < "${WSH_CACHE_DIR}/repolist.back" | "${WSH_YAML_CMD[@]}" ". * {\"repositories\": ${ENTRY}}" > "${WSH_REPOLIST}"
}

repos_gojq_git_add()
{
    ENTRY="{\"$2\": {\"type\": \"$1\", \"url\": \"$3\", \"version\": \"$4\"}}"
    "${WSH_YAML_CMD[@]}" --yaml-output "del(.repositories.\"$2\")" < "${WSH_CACHE_DIR}/repolist.back" | "${WSH_YAML_CMD[@]}" --null-input --yaml-output "input? // {} | . * {\"repositories\": ${ENTRY}}" > "${WSH_REPOLIST}"
}

execute_add()
{
    backup
    "${WSH_WORKSPACE_TYPE}_${WSH_YAML_TOOL}_$1_add" "$@"
}


git_foreach()
{
    "${WSH_WORKSPACE_TYPE}_${WSH_YAML_TOOL}_${WSH_SOURCE_TYPE}_repo_names" | "${WSH_XARGS[@]}" -I {} "${WSHANDLER[@]}" dir_run "{}" "$1"
}

execute_foreach()
{
    "${WSH_SOURCE_TYPE}_foreach" "$@"
}

execute_branch()
{
    ACTION=$1
    BRANCH=$2

    case ${ACTION} in
        new)
            git_foreach "((git status --porcelain | grep . > /dev/null) && git checkout -b ${BRANCH}) || true";;
        allnew)
            git_foreach "git checkout -b ${BRANCH}";;
        delete)
            git_foreach "(git ls-remote --exit-code --heads origin ${BRANCH} > /dev/null && git push origin --delete ${BRANCH}) || true";;
        show)
            git_foreach "git branch -a | grep '${BRANCH}'";;
        merge)
            TARGET_BRANCH=${3:-"main"}
            "${WSH_WORKSPACE_TYPE}_${WSH_YAML_TOOL}_git_repo_names" | while read -r NAME; do dir_git_merge "${NAME}" "${BRANCH}" "${TARGET_BRANCH}"; done
            ;;
        *) help 1;;
    esac
}

execute_commit()
{
    git_foreach "((git status --porcelain | grep . > /dev/null) && git commit -a -m '${1}') || true"
}

execute_clone()
{
    "$1_clone" "$2" "$3" "${WSH_WORKSPACE_ROOT}"

    check_workspace update
    execute_selective_command update
}

execute_init()
{
    mkdir -p "${WSH_WORKSPACE_ROOT}"

    if [ "$1" == "git" ]
    then
        shift
        pushd "${WSH_WORKSPACE_ROOT}" > /dev/null
        while [[ $# -gt 0 ]]
        do
            git_clone "$1"
            shift
        done
        popd > /dev/null

        check_workspace init
        "${WSHANDLER[@]}" -p add scrape
    else
        check_workspace init
    fi
}

filter_triplets_by_name()
{
    SOURCE_TYPE=$1

    if [ -z "$2" ]
    then
        "${WSH_WORKSPACE_TYPE}_${WSH_YAML_TOOL}_${SOURCE_TYPE}_repo_triplets"
    else
        "${WSH_WORKSPACE_TYPE}_${WSH_YAML_TOOL}_${SOURCE_TYPE}_repo_triplets" \
            | while read -r NAME REPO VERSION;
            do
                for NAME_PATTERN in "${@:2}";
                do
                    if [[ "${NAME}" =~ ^${NAME_PATTERN}$ ]];
                    then
                        echo "${NAME}" "${REPO}" "${VERSION}"
                    fi;
                done
            done
    fi
}

execute_selective_command()
{
    COMMAND_NAME="$1"

    if [ "${COMMAND_NAME}" == "update" ]
    then
        update_root
    fi

    for SOURCE_TYPE in ${WSH_SOURCE_TYPES}
    do
        filter_triplets_by_name "${SOURCE_TYPE}" "${@:2}" \
            | "${WSH_XARGS[@]}" -n 3 "${WSHANDLER[@]}" "dir_${SOURCE_TYPE}_${COMMAND_NAME}"
    done
}

set_version()
{
    TARGET_MATCH="$2"
    TARGET_VERSION="$3"

    case $1 in
        set_version_by_url) TYPE=REPO;;
        set_version_by_name) TYPE=NAME;;
        *) TYPE=ALL;;
    esac

    for SOURCE_TYPE in ${WSH_SOURCE_TYPES}
    do
        "${WSH_WORKSPACE_TYPE}_${WSH_YAML_TOOL}_${SOURCE_TYPE}_repo_triplets" \
            | while read -r NAME REPO VERSION; \
            do \
                if [ "${TYPE}" = "ALL" ]; \
                then \
                    cd "${WSH_WORKSPACE_ROOT:?}/${NAME}"; \
                    case $1 in \
                        set_version_to_hash) TARGET_VERSION="$("dir_${SOURCE_TYPE}_get_hash")";; \
                        set_version_to_branch) \
                            case "${WSH_COMMAND_POLICY}" in \
                                default|active)
                                    if [ "${TARGET_MATCH}" != "$("dir_${SOURCE_TYPE}_get_branch")" ]; \
                                    then \
                                        continue; \
                                    fi;; \
                                *) exit 1;; \
                            esac
                            TARGET_VERSION="${TARGET_MATCH}"; \
                            ;; \
                    esac \
                elif [ "${TARGET_MATCH}" != "${!TYPE}" ]; \
                then \
                    continue; \
                fi; \
                if [ "${VERSION}" != "${TARGET_VERSION}" ]; \
                then \
                    backup; \
                    echo "${NAME}: changing '${VERSION}' to '${TARGET_VERSION}'"; \
                    "${WSH_WORKSPACE_TYPE}_${WSH_YAML_TOOL}_${SOURCE_TYPE}_add" "${SOURCE_TYPE}" "${NAME}" "${REPO}" "${TARGET_VERSION}"; \
                fi; \
                if [ "${TYPE}" != "ALL" ]; \
                then \
                    exit; \
                fi; \
            done
    done
}


apt_install()
{
    sudo env DEBIAN_FRONTEND=noninteractive apt --yes --no-install-recommends install "$@"
}

snap_install()
{
    sudo snap install "$@"
}

wsh_download()
{
    if ! command -v "wget" > /dev/null
    then
        apt_install wget 1>&2
    fi
    wget -O - "$@"
}


WSH_YAML_TOOL="auto"
WSH_SOURCE_TYPES="git"
WSH_COMMAND_POLICY=default
WSH_JOBS=1
WSH_INDENT=4
WSH_XARGS=(xargs --no-run-if-empty -L 1 -P "${WSH_JOBS}")
WSH_KEEP_GOING=""
WSH_YAML_BINARY=
WSH_SOURCE_TYPE="git"
WSH_REPOLIST=
WSH_SORT_COMMAND="sort"

while [[ $# -gt 0 ]]
do
    case $1 in
        -v|--version)
            if [ -n "${WSH_VERSION}" ]
            then
                echo "wshandler version: ${WSH_VERSION}"
                exit
            else
                echo "wshandler version is unknown"
                exit 50
            fi;;

        -y|--yaml_tool)
            WSH_YAML_TOOL="$2"
            shift; shift;;

        -Y|--yaml_binary)
            WSH_YAML_BINARY=$2
            shift; shift;;

        -r|--root)
            WSH_WORKSPACE_ROOT=$2
            shift; shift;;

        -c|--cache)
            WSH_CACHE_DIR=$2
            shift; shift;;

        -t|--type)
            WSH_WORKSPACE_TYPE=$2
            shift; shift;;

        -j|--jobs)
            WSH_JOBS=$2
            shift; shift;;

        -i|--indent)
            WSH_INDENT=$2
            shift; shift;;

        -p|--policy)
            WSH_COMMAND_POLICY=$2
            shift; shift;;

        -k|--keep-going)
            WSH_KEEP_GOING="-k"
            shift;;

        -s|--source)
            WSH_SOURCE_TYPE=$2
            shift; shift;;

        -l|--list)
            WSH_REPOLIST=$2
            shift; shift;;

        -u|--unsorted)
            WSH_SORT_COMMAND="cat"
            shift;;

        clone|init)
            "execute_$1" "${@:2}"
            exit;;

        status)
            check_workspace "$1"
            execute_command "$1"
            exit;;

        scrape)
            check_workspace "$1"
            if [ -z "$2" ]
            then
                execute_command "$1" "${WSH_WORKSPACE_ROOT}"
            else
                execute_command "${@}"
            fi
            exit;;

        clean|unshallow|update|prune|push)
            check_workspace "$1"
            execute_selective_command "${@}"
            exit;;

        is_source_space)
            check_workspace "is_source_space"
            exit;;

        add|remove|merge|remove_by_url|foreach|branch|commit)
            check_workspace "$1"
            "execute_$1" "${@:2}"
            exit;;

        set_version_by_url|set_version_by_name|set_version_to_hash|set_version_to_branch)
            check_workspace "$1"
            set_version "${@}"
            exit;;

        dir_*_update|dir_run)
            if [ -n "${WSH_KEEP_GOING}" ]
            then
                "$1" "${@:2}" || true
            else
                "$1" "${@:2}"
            fi
            exit;;

        dir_*)
            "$1" "${@:2}"
            exit;;

        install_test_deps)
            apt_install shellcheck
            exit;;

        install)
            BIN_PATH=${2:-"${HOME}/bin"}

            mkdir -p "${BIN_PATH}"
            if [ ! "${BASH_SOURCE[0]}" -ef "${BIN_PATH}/wshandler" ]
            then
                cp "${BASH_SOURCE[0]}" "${BIN_PATH}/wshandler"
            fi

            case "${WSH_COMMAND_POLICY}" in
                skip_yaml_tool|yq_skip|default) exit;;
            esac

            if [ -z "${WSH_YAML_BINARY}" ]
            then
                WSH_YAML_BINARY="${WSH_YAML_TOOL}"
            fi

            if ! command -v "${WSH_YAML_BINARY}" > /dev/null
            then
                case ${WSH_YAML_TOOL} in
                    yq)
                        case "${WSH_COMMAND_POLICY}" in
                            snap)
                                if ! command -v "snap" > /dev/null
                                then
                                    apt_install snap
                                fi
                                snap_install yq
                                ;;
                            download)
                                wsh_download "https://github.com/mikefarah/yq/releases/latest/download/yq_linux_$(dpkg --print-architecture)" > "${BIN_PATH}/yq"
                                chmod +x "${BIN_PATH}/yq"
                                ;;
                            *)
                                echo "Unsupported installation policy.";
                                exit 4;;
                        esac;;
                    gojq)
                        case "${WSH_COMMAND_POLICY}" in
                            apt)
                                apt_install gojq
                                ;;
                            *)
                                echo "Unsupported installation policy.";
                                exit 5;;
                        esac;;
                    auto)
                        echo "Automatic yaml tool detection is not supported for this command.";
                        exit 5;;
                esac
            fi
            exit;;

        upgrade)
            BIN_PATH=${2:-"${HOME}/bin"}
            mkdir -p "${BIN_PATH}"

            wsh_download "https://github.com/asherikov/wshandler/releases/latest/download/wshandler" > "${BIN_PATH}/wshandler"
            chmod +x "${BIN_PATH}/wshandler"
            exit;;

        upgrade_appimage)
            BIN_PATH=${2:-"${HOME}/bin"}
            mkdir -p "${BIN_PATH}"

            wsh_download "https://github.com/asherikov/wshandler/releases/latest/download/wshandler-yq-$(uname -m).AppImage" > "${BIN_PATH}/wshandler"
            chmod +x "${BIN_PATH}/wshandler"
            exit;;

        *)
            help 1;;
    esac
done

help 2
